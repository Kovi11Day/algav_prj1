package com.algav.patricia;

import com.algav.patricia.exceptions.OutOfCharacterSetException;
import com.algav.patricia.exceptions.PATStringException;
import static com.algav.patricia.string.StringManipulation.*;

public class PatriciaTrie implements IPatriciaTrie{

	private IPATCase[] patTrie;
	private static final int SIZE = 128;
	
	//creer un noeud vide et y ajouter un seul mot
	public PatriciaTrie(String mot){
		this.patTrie = new IPATCase[SIZE];
		
		this.patTrie[asciiFirst(mot)] 
				= new PATCase (concatEpsilon(mot));
	}
	
	public String getWord (int i){
		return this.patTrie[i].getWord();
	}
	
	public void setWord(int i, String word){
		this.patTrie[i].setWord(word);
	}
	
	public IPatriciaTrie getSon (int i){
		//if son == null create case
		return this.patTrie[i].getSon();
	}
	
	public void setSon (int i, IPatriciaTrie node){
		this.patTrie[i].setSon(node);
	}
	
	public IPATCase getCase (int i){
		return this.patTrie[i];
	}
	
	public void setCase (int i, String s){
		this.patTrie[i] = new PATCase(s);
	}
	
	
	/////patricia methods
	//ajout d'un mot dans un patricia trie
	//note: le patricia trie ne peut pas etre vide
	public void ajout(String word){
		sysAjout(concatEpsilon(stringValid(word)));
	}
	
	public void sysAjout (String word){ 
		//cas1
		if (this == null){
			System.out.println("patricia trie is null");
			return;
		}
		//cas2
		if (word.length() == 0){
			return;
		}
		
		//cas3
		if (this.getCase(asciiFirst(word)) == null){
			this.setCase(asciiFirst(word), word);
			return;
		}
	
		//cas4
		//mot dans case prefixe de mot ajouter
		if (word.startsWith(this.getWord(asciiFirst(word)))){
			//get rest of word
			int len = this.getWord(asciiFirst(word)).length();
			String rest = word.substring(len, word.length()-1);
			//ajouter reste du mot dans fils
			this.getSon(asciiFirst(word)).sysAjout(rest);
		}
		
		//cas5
		else{
			String prefixe = prefixe(word, this.getWord(asciiFirst(word)));
			String restWordInput = rest(word, prefixe);
			String restWordInDic = rest(this.getWord(asciiFirst(word)),prefixe);
			IPatriciaTrie newNode = new PatriciaTrie(restWordInDic);
			IPatriciaTrie currentSon = this.getSon(asciiFirst(word));
			
			//breaking up struct to accomodate new word
			this.setWord(asciiFirst(prefixe), prefixe);
			newNode.sysAjout(restWordInDic);
			newNode.setSon(asciiFirst(restWordInDic), this.getSon(asciiFirst(prefixe)));
			this.setSon(asciiFirst(prefixe), newNode);
			//adding new word
			this.getSon(asciiFirst(prefixe)).sysAjout(restWordInput);
		}
			
	}
	
	public String[] listeMots(){
		String liste[] = new String[10];
		int nbMots = 10;
		return this.sysListeMots(liste, nbMots);
	}
	
	public String[] sysListeMots(String[] liste, int nbMots){
		
	}
	
	public static void main(String[] s){
		String s1 = "abcdefk";
		String s2 = "fff";
		String s3 = "";
		System.out.println(s3 = s3.concat(String.valueOf(s1.charAt(0))));
		System.out.println(s3 = s3.concat(String.valueOf(s1.charAt(1))));
		System.out.println(s3);
		System.out.println(s3.length());
		
		System.out.println("prefixe: " + prefixe(s1,s2));
		System.out.println("reste: " + rest(s1,prefixe(s1,s2)));
	}
	
	
}

package com.algav.patricia.transformation;

import java.util.LinkedList;

import com.algav.patricia.IPatriciaTrie;
import com.algav.patricia.TestPatricia;
import static com.algav.patricia.string.StringManipulation.*;

public class Transformation {

	public static LinkedList<TransNode> compress (IPatriciaTrie p){
		//remove all empty nodes from trie
		if (p == null)
			return null;
		
		LinkedList<TransNode> result = new LinkedList<TransNode>();
		
		for(int i = 0; i < p.getSize(); ++i){
			if (p.getCase(i) != null){
				result.add(new TransNode(p.getWord(i), compress(p.getSon(i))));
			}
		}
		return result;
	}
	
	public static void removeEpsNodes(LinkedList<TransNode> cp){
		if (cp == null)
			return;
		for (int i = 0; i < cp.size(); ++i){
			if (cp.get(i).getSon() != null && cp.get(i).getSon().get(0).getWord().equals((char)(0))){
				concatEpsilon(cp.get(i).getWord());
				cp.get(i).getSon().remove(0);
			}
			removeEpsNodes(cp.get(i).getSon());
		}
	}
	public static int middle(int len){
		return (int)Math.floor((len - 1)/2);
	}
	public static TransTrie eclater(LinkedList<TransNode> cp){
		if (cp == null)
			return null;
		
		TransTrie result = null;
		LinkedList<TransNode> lInf = null;
		LinkedList<TransNode> lSup = null;
		LinkedList<TransNode> lEq = null;

		if (cp.size() == 1){
			result = new TransTrie(cp.get(0));
			result.setEq(eclater(cp.get(0).getSon()));
			
		}else if (cp.size() == 2){	
			result = new TransTrie(cp.get(0));
			result.setEq(eclater(cp.get(0).getSon()));
			result.setSup(new TransTrie(cp.get(0)));
			result.getSup().setEq(eclater(cp.get(1).getSon()));
		}else{
			result = new TransTrie(cp.get(middle(cp.size())));
			result.setEq(eclater(cp.get(middle(cp.size())).getSon()));
		}
		//cp.subList //for root=eclater(sublist(i;k)), left=eclater(sublist(l;m)), right=eclater(sublist(o,p))
		return result;
	}
	
	public static void main(String[] args){
		TestPatricia t = new TestPatricia("./shakespeare/allswell.txt");
		LinkedList<TransNode> ct = compress(t.getPatriciaTrie());
		removeEpsNodes(ct);
	}
}
